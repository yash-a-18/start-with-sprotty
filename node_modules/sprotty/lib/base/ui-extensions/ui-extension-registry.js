"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetUIExtensionVisibilityCommand = exports.SetUIExtensionVisibilityAction = exports.UIExtensionRegistry = void 0;
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
const inversify_1 = require("inversify");
const registry_1 = require("../../utils/registry");
const command_1 = require("../commands/command");
const types_1 = require("../types");
/**
 * The registry maintaining UI extensions registered via `TYPES.IUIExtension`.
 */
let UIExtensionRegistry = class UIExtensionRegistry extends registry_1.InstanceRegistry {
    constructor(extensions = []) {
        super();
        extensions.forEach((extension) => this.register(extension.id(), extension));
    }
};
exports.UIExtensionRegistry = UIExtensionRegistry;
exports.UIExtensionRegistry = UIExtensionRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.IUIExtension)),
    __param(0, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array])
], UIExtensionRegistry);
var SetUIExtensionVisibilityAction;
(function (SetUIExtensionVisibilityAction) {
    SetUIExtensionVisibilityAction.KIND = "setUIExtensionVisibility";
    function create(options) {
        var _a;
        return {
            kind: SetUIExtensionVisibilityAction.KIND,
            extensionId: options.extensionId,
            visible: options.visible,
            contextElementsId: (_a = options.contextElementsId) !== null && _a !== void 0 ? _a : []
        };
    }
    SetUIExtensionVisibilityAction.create = create;
})(SetUIExtensionVisibilityAction || (exports.SetUIExtensionVisibilityAction = SetUIExtensionVisibilityAction = {}));
let SetUIExtensionVisibilityCommand = class SetUIExtensionVisibilityCommand extends command_1.SystemCommand {
    constructor(action) {
        super();
        this.action = action;
    }
    execute(context) {
        const extension = this.registry.get(this.action.extensionId);
        if (extension) {
            this.action.visible ? extension.show(context.root, ...this.action.contextElementsId) : extension.hide();
        }
        return { model: context.root, modelChanged: false };
    }
    undo(context) {
        return { model: context.root, modelChanged: false };
    }
    redo(context) {
        return { model: context.root, modelChanged: false };
    }
};
exports.SetUIExtensionVisibilityCommand = SetUIExtensionVisibilityCommand;
SetUIExtensionVisibilityCommand.KIND = SetUIExtensionVisibilityAction.KIND;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.UIExtensionRegistry),
    __metadata("design:type", UIExtensionRegistry)
], SetUIExtensionVisibilityCommand.prototype, "registry", void 0);
exports.SetUIExtensionVisibilityCommand = SetUIExtensionVisibilityCommand = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], SetUIExtensionVisibilityCommand);
//# sourceMappingURL=ui-extension-registry.js.map