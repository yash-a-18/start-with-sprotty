"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onAction = exports.configureActionHandler = exports.ActionHandlerRegistry = void 0;
const inversify_1 = require("inversify");
const types_1 = require("../types");
const registry_1 = require("../../utils/registry");
const inversify_2 = require("../../utils/inversify");
/**
 * The action handler registry maps actions to their handlers using the Action.kind property.
 */
let ActionHandlerRegistry = class ActionHandlerRegistry extends registry_1.MultiInstanceRegistry {
    constructor(registrations, initializers) {
        super();
        registrations.forEach(registration => this.register(registration.actionKind, registration.factory()));
        initializers.forEach(initializer => this.initializeActionHandler(initializer));
    }
    initializeActionHandler(initializer) {
        initializer.initialize(this);
    }
};
exports.ActionHandlerRegistry = ActionHandlerRegistry;
exports.ActionHandlerRegistry = ActionHandlerRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.ActionHandlerRegistration)),
    __param(0, (0, inversify_1.optional)()),
    __param(1, (0, inversify_1.multiInject)(types_1.TYPES.IActionHandlerInitializer)),
    __param(1, (0, inversify_1.optional)()),
    __metadata("design:paramtypes", [Array, Array])
], ActionHandlerRegistry);
/**
 * Utility function to register an action handler for an action kind.
 */
function configureActionHandler(context, kind, constr) {
    if (typeof constr === 'function') {
        if (!(0, inversify_2.isInjectable)(constr)) {
            throw new Error(`Action handlers should be @injectable: ${constr.name}`);
        }
        if (!context.isBound(constr)) {
            context.bind(constr).toSelf();
        }
    }
    context.bind(types_1.TYPES.ActionHandlerRegistration).toDynamicValue(ctx => ({
        actionKind: kind,
        factory: () => ctx.container.get(constr)
    }));
}
exports.configureActionHandler = configureActionHandler;
/**
 * Utility function to register an action handler for an action kind.
 */
function onAction(context, kind, handle) {
    context.bind(types_1.TYPES.ActionHandlerRegistration).toConstantValue({
        actionKind: kind,
        factory: () => ({ handle })
    });
}
exports.onAction = onAction;
//# sourceMappingURL=action-handler.js.map