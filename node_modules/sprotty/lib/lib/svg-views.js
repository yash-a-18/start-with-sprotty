"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmptyGroupView = exports.DiamondNodeView = exports.RectangularNodeView = exports.CircularNodeView = exports.SvgViewportView = void 0;
/** @jsx svg */
const jsx_1 = require("./jsx");
const sgraph_1 = require("../graph/sgraph");
const views_1 = require("../features/bounds/views");
const geometry_1 = require("../utils/geometry");
const inversify_1 = require("inversify");
let SvgViewportView = class SvgViewportView {
    render(model, context, args) {
        const transform = `scale(${model.zoom}) translate(${-model.scroll.x},${-model.scroll.y})`;
        return (0, jsx_1.svg)("svg", null,
            (0, jsx_1.svg)("g", { transform: transform }, context.renderChildren(model)));
    }
};
exports.SvgViewportView = SvgViewportView;
exports.SvgViewportView = SvgViewportView = __decorate([
    (0, inversify_1.injectable)()
], SvgViewportView);
let CircularNodeView = class CircularNodeView extends views_1.ShapeView {
    render(node, context, args) {
        if (!this.isVisible(node, context)) {
            return undefined;
        }
        const radius = this.getRadius(node);
        return (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("circle", { "class-sprotty-node": node instanceof sgraph_1.SNodeImpl, "class-sprotty-port": node instanceof sgraph_1.SPortImpl, "class-mouseover": node.hoverFeedback, "class-selected": node.selected, r: radius, cx: radius, cy: radius }),
            context.renderChildren(node));
    }
    getRadius(node) {
        const d = Math.min(node.size.width, node.size.height);
        return d > 0 ? d / 2 : 0;
    }
};
exports.CircularNodeView = CircularNodeView;
exports.CircularNodeView = CircularNodeView = __decorate([
    (0, inversify_1.injectable)()
], CircularNodeView);
let RectangularNodeView = class RectangularNodeView extends views_1.ShapeView {
    render(node, context, args) {
        if (!this.isVisible(node, context)) {
            return undefined;
        }
        return (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("rect", { "class-sprotty-node": node instanceof sgraph_1.SNodeImpl, "class-sprotty-port": node instanceof sgraph_1.SPortImpl, "class-mouseover": node.hoverFeedback, "class-selected": node.selected, x: "0", y: "0", width: Math.max(node.size.width, 0), height: Math.max(node.size.height, 0) }),
            context.renderChildren(node));
    }
};
exports.RectangularNodeView = RectangularNodeView;
exports.RectangularNodeView = RectangularNodeView = __decorate([
    (0, inversify_1.injectable)()
], RectangularNodeView);
let DiamondNodeView = class DiamondNodeView extends views_1.ShapeView {
    render(node, context, args) {
        if (!this.isVisible(node, context)) {
            return undefined;
        }
        const diamond = new geometry_1.Diamond({ height: Math.max(node.size.height, 0), width: Math.max(node.size.width, 0), x: 0, y: 0 });
        const points = `${svgStr(diamond.topPoint)} ${svgStr(diamond.rightPoint)} ${svgStr(diamond.bottomPoint)} ${svgStr(diamond.leftPoint)}`;
        return (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("polygon", { "class-sprotty-node": node instanceof sgraph_1.SNodeImpl, "class-sprotty-port": node instanceof sgraph_1.SPortImpl, "class-mouseover": node.hoverFeedback, "class-selected": node.selected, points: points }),
            context.renderChildren(node));
    }
};
exports.DiamondNodeView = DiamondNodeView;
exports.DiamondNodeView = DiamondNodeView = __decorate([
    (0, inversify_1.injectable)()
], DiamondNodeView);
function svgStr(point) {
    return `${point.x},${point.y}`;
}
let EmptyGroupView = class EmptyGroupView {
    render(model, context) {
        return (0, jsx_1.svg)("g", null);
    }
};
exports.EmptyGroupView = EmptyGroupView;
exports.EmptyGroupView = EmptyGroupView = __decorate([
    (0, inversify_1.injectable)()
], EmptyGroupView);
//# sourceMappingURL=svg-views.js.map