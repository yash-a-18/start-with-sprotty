"use strict";
/********************************************************************************
 * Copyright (c) 2017-2020 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForeignObjectView = exports.PreRenderedView = void 0;
/** @jsx svg */
const jsx_1 = require("./jsx");
const inversify_1 = require("inversify");
const virtualize_1 = __importDefault(require("./virtualize"));
const vnode_utils_1 = require("../base/views/vnode-utils");
const views_1 = require("../features/bounds/views");
const model_1 = require("./model");
let PreRenderedView = class PreRenderedView extends views_1.ShapeView {
    render(model, context) {
        if (model instanceof model_1.ShapedPreRenderedElementImpl && !this.isVisible(model, context)) {
            return undefined;
        }
        const node = (0, virtualize_1.default)(model.code);
        if (node === null)
            return undefined;
        this.correctNamespace(node);
        return node;
    }
    correctNamespace(node) {
        if (node.sel === 'svg' || node.sel === 'g')
            (0, vnode_utils_1.setNamespace)(node, 'http://www.w3.org/2000/svg');
    }
};
exports.PreRenderedView = PreRenderedView;
exports.PreRenderedView = PreRenderedView = __decorate([
    (0, inversify_1.injectable)()
], PreRenderedView);
/**
 * An SVG `foreignObject` view with a namespace specified by the provided `ForeignObjectElement`.
 * Note that `foreignObject` may not be supported by all browsers or SVG viewers.
 */
let ForeignObjectView = class ForeignObjectView {
    render(model, context) {
        const foreignObjectContents = (0, virtualize_1.default)(model.code);
        if (foreignObjectContents === null)
            return undefined;
        const node = (0, jsx_1.svg)("g", null,
            (0, jsx_1.svg)("foreignObject", { requiredFeatures: 'http://www.w3.org/TR/SVG11/feature#Extensibility', height: model.bounds.height, width: model.bounds.width, x: 0, y: 0 }, foreignObjectContents),
            context.renderChildren(model));
        (0, vnode_utils_1.setAttr)(node, 'class', model.type);
        (0, vnode_utils_1.setNamespace)(foreignObjectContents, model.namespace);
        return node;
    }
};
exports.ForeignObjectView = ForeignObjectView;
exports.ForeignObjectView = ForeignObjectView = __decorate([
    (0, inversify_1.injectable)()
], ForeignObjectView);
//# sourceMappingURL=generic-views.js.map