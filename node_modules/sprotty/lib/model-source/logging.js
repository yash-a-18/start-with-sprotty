"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForwardingLogger = void 0;
const inversify_1 = require("inversify");
const actions_1 = require("sprotty-protocol/lib/actions");
const logging_1 = require("../utils/logging");
const types_1 = require("../base/types");
/**
 * A logger that forwards messages of type 'error', 'warn', and 'info' to the model source.
 */
let ForwardingLogger = class ForwardingLogger {
    error(thisArg, message, ...params) {
        if (this.logLevel >= logging_1.LogLevel.error)
            this.forward(thisArg, message, logging_1.LogLevel.error, params);
    }
    warn(thisArg, message, ...params) {
        if (this.logLevel >= logging_1.LogLevel.warn)
            this.forward(thisArg, message, logging_1.LogLevel.warn, params);
    }
    info(thisArg, message, ...params) {
        if (this.logLevel >= logging_1.LogLevel.info)
            this.forward(thisArg, message, logging_1.LogLevel.info, params);
    }
    log(thisArg, message, ...params) {
        if (this.logLevel >= logging_1.LogLevel.log) {
            // We cannot forward 'log' level messages since that would lead to endless loops
            try {
                const caller = typeof thisArg === 'object' ? thisArg.constructor.name : String(thisArg);
                console.log.apply(thisArg, [caller + ': ' + message, ...params]);
            }
            catch (error) { }
        }
    }
    forward(thisArg, message, logLevel, params) {
        const date = new Date();
        const action = actions_1.LoggingAction.create({
            message,
            severity: logging_1.LogLevel[logLevel],
            time: date.toLocaleTimeString(),
            caller: typeof thisArg === 'object' ? thisArg.constructor.name : String(thisArg),
            params: params.map(p => JSON.stringify(p))
        });
        this.modelSourceProvider().then(modelSource => {
            try {
                modelSource.handle(action);
            }
            catch (error) {
                try {
                    console.log.apply(thisArg, [message, action, error]);
                }
                catch (e) { }
            }
        });
    }
};
exports.ForwardingLogger = ForwardingLogger;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ModelSourceProvider),
    __metadata("design:type", Function)
], ForwardingLogger.prototype, "modelSourceProvider", void 0);
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.LogLevel),
    __metadata("design:type", Number)
], ForwardingLogger.prototype, "logLevel", void 0);
exports.ForwardingLogger = ForwardingLogger = __decorate([
    (0, inversify_1.injectable)()
], ForwardingLogger);
//# sourceMappingURL=logging.js.map