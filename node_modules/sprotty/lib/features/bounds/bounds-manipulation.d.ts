/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Action, RequestBoundsAction, SetBoundsAction } from 'sprotty-protocol/lib/actions';
import { Alignable } from 'sprotty-protocol/lib/model';
import { Bounds, Dimension, Point } from 'sprotty-protocol/lib/utils/geometry';
import { CommandExecutionContext, CommandResult, CommandReturn, HiddenCommand, SystemCommand } from '../../base/commands/command';
import { SModelElementImpl } from '../../base/model/smodel';
import { InternalBoundsAware } from './model';
export interface ResolvedElementAndBounds {
    element: SModelElementImpl & InternalBoundsAware;
    oldBounds: Bounds;
    newPosition?: Point;
    newSize: Dimension;
}
export interface ResolvedElementAndAlignment {
    element: SModelElementImpl & Alignable;
    oldAlignment: Point;
    newAlignment: Point;
}
export declare class SetBoundsCommand extends SystemCommand {
    protected readonly action: SetBoundsAction;
    static readonly KIND: string;
    protected bounds: ResolvedElementAndBounds[];
    constructor(action: SetBoundsAction);
    execute(context: CommandExecutionContext): CommandReturn;
    undo(context: CommandExecutionContext): CommandReturn;
    redo(context: CommandExecutionContext): CommandReturn;
}
export declare class RequestBoundsCommand extends HiddenCommand {
    protected action: RequestBoundsAction;
    static readonly KIND: string;
    constructor(action: RequestBoundsAction);
    execute(context: CommandExecutionContext): CommandResult;
    get blockUntil(): (action: Action) => boolean;
}
//# sourceMappingURL=bounds-manipulation.d.ts.map