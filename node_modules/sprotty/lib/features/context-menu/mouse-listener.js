"use strict";
/********************************************************************************
 * Copyright (c) 2019 EclipseSource and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextMenuMouseListener = void 0;
const inversify_1 = require("inversify");
const actions_1 = require("sprotty-protocol/lib/actions");
const smodel_utils_1 = require("../../base/model/smodel-utils");
const types_1 = require("../../base/types");
const mouse_tool_1 = require("../../base/views/mouse-tool");
const model_1 = require("../select/model");
const menu_providers_1 = require("./menu-providers");
let ContextMenuMouseListener = class ContextMenuMouseListener extends mouse_tool_1.MouseListener {
    constructor(contextMenuService, menuProvider) {
        super();
        this.contextMenuService = contextMenuService;
        this.menuProvider = menuProvider;
    }
    contextMenu(target, event) {
        this.showContextMenu(target, event);
        return [];
    }
    async showContextMenu(target, event) {
        let menuService;
        try {
            menuService = await this.contextMenuService();
        }
        catch (rejected) {
            // IContextMenuService is not bound => do nothing
            return;
        }
        let isTargetSelected = false;
        const selectableTarget = (0, smodel_utils_1.findParentByFeature)(target, model_1.isSelectable);
        if (selectableTarget) {
            isTargetSelected = selectableTarget.selected;
            selectableTarget.selected = true;
        }
        const root = target.root;
        const mousePosition = { x: event.x, y: event.y };
        if (target.id === root.id || (0, model_1.isSelected)(selectableTarget)) {
            const menuItems = await this.menuProvider.getItems(root, mousePosition);
            const restoreSelection = () => { if (selectableTarget)
                selectableTarget.selected = isTargetSelected; };
            menuService.show(menuItems, mousePosition, restoreSelection);
        }
        else {
            if ((0, model_1.isSelectable)(target)) {
                const options = { selectedElementsIDs: [target.id], deselectedElementsIDs: Array.from(root.index.all().filter(model_1.isSelected), (val) => { return val.id; }) };
                await this.actionDispatcher.dispatch(actions_1.SelectAction.create(options));
            }
            const items = await this.menuProvider.getItems(root, mousePosition);
            menuService.show(items, mousePosition);
        }
    }
};
exports.ContextMenuMouseListener = ContextMenuMouseListener;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.IActionDispatcher),
    __metadata("design:type", Object)
], ContextMenuMouseListener.prototype, "actionDispatcher", void 0);
exports.ContextMenuMouseListener = ContextMenuMouseListener = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.IContextMenuServiceProvider)),
    __param(1, (0, inversify_1.inject)(types_1.TYPES.IContextMenuProviderRegistry)),
    __metadata("design:paramtypes", [Function, menu_providers_1.ContextMenuProviderRegistry])
], ContextMenuMouseListener);
//# sourceMappingURL=mouse-listener.js.map