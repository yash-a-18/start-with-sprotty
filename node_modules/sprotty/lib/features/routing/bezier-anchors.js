"use strict";
/********************************************************************************
 * Copyright (c) 2021 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BezierDiamondAnchor = exports.BezierRectangleAnchor = exports.BezierEllipseAnchor = void 0;
const anchor_1 = require("./anchor");
const inversify_1 = require("inversify");
const polyline_anchors_1 = require("./polyline-anchors");
const bezier_edge_router_1 = require("./bezier-edge-router");
let BezierEllipseAnchor = class BezierEllipseAnchor extends polyline_anchors_1.EllipseAnchor {
    get kind() {
        return bezier_edge_router_1.BezierEdgeRouter.KIND + ':' + anchor_1.ELLIPTIC_ANCHOR_KIND;
    }
};
exports.BezierEllipseAnchor = BezierEllipseAnchor;
exports.BezierEllipseAnchor = BezierEllipseAnchor = __decorate([
    (0, inversify_1.injectable)()
], BezierEllipseAnchor);
let BezierRectangleAnchor = class BezierRectangleAnchor extends polyline_anchors_1.RectangleAnchor {
    get kind() {
        return bezier_edge_router_1.BezierEdgeRouter.KIND + ':' + anchor_1.RECTANGULAR_ANCHOR_KIND;
    }
};
exports.BezierRectangleAnchor = BezierRectangleAnchor;
exports.BezierRectangleAnchor = BezierRectangleAnchor = __decorate([
    (0, inversify_1.injectable)()
], BezierRectangleAnchor);
let BezierDiamondAnchor = class BezierDiamondAnchor extends polyline_anchors_1.DiamondAnchor {
    get kind() {
        return bezier_edge_router_1.BezierEdgeRouter.KIND + ':' + anchor_1.DIAMOND_ANCHOR_KIND;
    }
};
exports.BezierDiamondAnchor = BezierDiamondAnchor;
exports.BezierDiamondAnchor = BezierDiamondAnchor = __decorate([
    (0, inversify_1.injectable)()
], BezierDiamondAnchor);
//# sourceMappingURL=bezier-anchors.js.map