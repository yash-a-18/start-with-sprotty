"use strict";
/********************************************************************************
 * Copyright (c) 2019 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnchorComputerRegistry = exports.RECTANGULAR_ANCHOR_KIND = exports.ELLIPTIC_ANCHOR_KIND = exports.DIAMOND_ANCHOR_KIND = void 0;
const inversify_1 = require("inversify");
const types_1 = require("../../base/types");
const registry_1 = require("../../utils/registry");
exports.DIAMOND_ANCHOR_KIND = 'diamond';
exports.ELLIPTIC_ANCHOR_KIND = 'elliptic';
exports.RECTANGULAR_ANCHOR_KIND = 'rectangular';
let AnchorComputerRegistry = class AnchorComputerRegistry extends registry_1.InstanceRegistry {
    constructor(anchors) {
        super();
        anchors.forEach(anchor => this.register(anchor.kind, anchor));
    }
    get defaultAnchorKind() {
        return exports.RECTANGULAR_ANCHOR_KIND;
    }
    get(routerKind, anchorKind) {
        return super.get(`${routerKind}:${anchorKind || this.defaultAnchorKind}`);
    }
};
exports.AnchorComputerRegistry = AnchorComputerRegistry;
exports.AnchorComputerRegistry = AnchorComputerRegistry = __decorate([
    (0, inversify_1.injectable)(),
    __param(0, (0, inversify_1.multiInject)(types_1.TYPES.IAnchorComputer)),
    __metadata("design:paramtypes", [Array])
], AnchorComputerRegistry);
//# sourceMappingURL=anchor.js.map