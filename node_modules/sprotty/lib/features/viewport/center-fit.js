"use strict";
/********************************************************************************
 * Copyright (c) 2017-2023 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CenterKeyboardListener = exports.FitToScreenCommand = exports.CenterCommand = exports.BoundsAwareViewportCommand = void 0;
const actions_1 = require("sprotty-protocol/lib/actions");
const geometry_1 = require("sprotty-protocol/lib/utils/geometry");
const keyboard_1 = require("../../utils/keyboard");
const smodel_1 = require("../../base/model/smodel");
const command_1 = require("../../base/commands/command");
const key_tool_1 = require("../../base/views/key-tool");
const model_1 = require("../bounds/model");
const model_2 = require("../select/model");
const viewport_1 = require("./viewport");
const model_3 = require("./model");
const inversify_1 = require("inversify");
const types_1 = require("../../base/types");
let BoundsAwareViewportCommand = class BoundsAwareViewportCommand extends command_1.Command {
    constructor(animate) {
        super();
        this.animate = animate;
    }
    initialize(model) {
        if (!(0, model_3.isViewport)(model)) {
            return;
        }
        this.oldViewport = {
            scroll: model.scroll,
            zoom: model.zoom
        };
        const allBounds = [];
        this.getElementIds().forEach(id => {
            const element = model.index.getById(id);
            if (element && (0, model_1.isBoundsAware)(element)) {
                allBounds.push(this.boundsInViewport(element, element.bounds, model));
            }
        });
        if (allBounds.length === 0) {
            model.index.all().forEach(element => {
                if ((0, model_2.isSelectable)(element) && element.selected && (0, model_1.isBoundsAware)(element)) {
                    allBounds.push(this.boundsInViewport(element, element.bounds, model));
                }
            });
        }
        if (allBounds.length === 0) {
            model.index.all().forEach(element => {
                if ((0, model_1.isBoundsAware)(element)) {
                    allBounds.push(this.boundsInViewport(element, element.bounds, model));
                }
            });
        }
        if (allBounds.length !== 0) {
            const bounds = allBounds.reduce((b0, b1) => geometry_1.Bounds.combine(b0, b1));
            if (geometry_1.Dimension.isValid(bounds)) {
                const newViewport = this.getNewViewport(bounds, model);
                if (newViewport) {
                    const { zoomLimits, horizontalScrollLimits, verticalScrollLimits } = this.viewerOptions;
                    this.newViewport = (0, model_3.limitViewport)(newViewport, model.canvasBounds, horizontalScrollLimits, verticalScrollLimits, zoomLimits);
                }
            }
        }
    }
    boundsInViewport(element, bounds, viewport) {
        if (element instanceof smodel_1.SChildElementImpl && element.parent !== viewport)
            return this.boundsInViewport(element.parent, element.parent.localToParent(bounds), viewport);
        else
            return bounds;
    }
    execute(context) {
        this.initialize(context.root);
        return this.redo(context);
    }
    undo(context) {
        const model = context.root;
        if ((0, model_3.isViewport)(model) && this.newViewport !== undefined && !this.equal(this.newViewport, this.oldViewport)) {
            if (this.animate)
                return new viewport_1.ViewportAnimation(model, this.newViewport, this.oldViewport, context).start();
            else {
                model.scroll = this.oldViewport.scroll;
                model.zoom = this.oldViewport.zoom;
            }
        }
        return model;
    }
    redo(context) {
        const model = context.root;
        if ((0, model_3.isViewport)(model) && this.newViewport !== undefined && !this.equal(this.newViewport, this.oldViewport)) {
            if (this.animate) {
                return new viewport_1.ViewportAnimation(model, this.oldViewport, this.newViewport, context).start();
            }
            else {
                model.scroll = this.newViewport.scroll;
                model.zoom = this.newViewport.zoom;
            }
        }
        return model;
    }
    equal(vp1, vp2) {
        return (0, geometry_1.almostEquals)(vp1.zoom, vp2.zoom) && (0, geometry_1.almostEquals)(vp1.scroll.x, vp2.scroll.x) && (0, geometry_1.almostEquals)(vp1.scroll.y, vp2.scroll.y);
    }
};
exports.BoundsAwareViewportCommand = BoundsAwareViewportCommand;
__decorate([
    (0, inversify_1.inject)(types_1.TYPES.ViewerOptions),
    __metadata("design:type", Object)
], BoundsAwareViewportCommand.prototype, "viewerOptions", void 0);
exports.BoundsAwareViewportCommand = BoundsAwareViewportCommand = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [Boolean])
], BoundsAwareViewportCommand);
let CenterCommand = class CenterCommand extends BoundsAwareViewportCommand {
    constructor(action) {
        super(action.animate);
        this.action = action;
    }
    getElementIds() {
        return this.action.elementIds;
    }
    getNewViewport(bounds, model) {
        if (!geometry_1.Dimension.isValid(model.canvasBounds)) {
            return undefined;
        }
        let zoom = 1;
        if (this.action.retainZoom && (0, model_3.isViewport)(model)) {
            zoom = model.zoom;
        }
        else if (this.action.zoomScale) {
            zoom = this.action.zoomScale;
        }
        const c = geometry_1.Bounds.center(bounds);
        return {
            scroll: {
                x: c.x - 0.5 * model.canvasBounds.width / zoom,
                y: c.y - 0.5 * model.canvasBounds.height / zoom
            },
            zoom: zoom
        };
    }
};
exports.CenterCommand = CenterCommand;
CenterCommand.KIND = actions_1.CenterAction.KIND;
exports.CenterCommand = CenterCommand = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], CenterCommand);
let FitToScreenCommand = class FitToScreenCommand extends BoundsAwareViewportCommand {
    constructor(action) {
        super(action.animate);
        this.action = action;
    }
    getElementIds() {
        return this.action.elementIds;
    }
    getNewViewport(bounds, model) {
        if (!geometry_1.Dimension.isValid(model.canvasBounds)) {
            return undefined;
        }
        const c = geometry_1.Bounds.center(bounds);
        const delta = this.action.padding === undefined
            ? 0
            : 2 * this.action.padding;
        let zoom = Math.min(model.canvasBounds.width / (bounds.width + delta), model.canvasBounds.height / (bounds.height + delta));
        if (this.action.maxZoom !== undefined)
            zoom = Math.min(zoom, this.action.maxZoom);
        if (zoom === Infinity) {
            zoom = 1;
        }
        return {
            scroll: {
                x: c.x - 0.5 * model.canvasBounds.width / zoom,
                y: c.y - 0.5 * model.canvasBounds.height / zoom
            },
            zoom: zoom
        };
    }
};
exports.FitToScreenCommand = FitToScreenCommand;
FitToScreenCommand.KIND = actions_1.FitToScreenAction.KIND;
exports.FitToScreenCommand = FitToScreenCommand = __decorate([
    __param(0, (0, inversify_1.inject)(types_1.TYPES.Action)),
    __metadata("design:paramtypes", [Object])
], FitToScreenCommand);
class CenterKeyboardListener extends key_tool_1.KeyListener {
    keyDown(element, event) {
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyC', 'ctrlCmd', 'shift'))
            return [actions_1.CenterAction.create([])];
        if ((0, keyboard_1.matchesKeystroke)(event, 'KeyF', 'ctrlCmd', 'shift'))
            return [actions_1.FitToScreenAction.create([])];
        return [];
    }
}
exports.CenterKeyboardListener = CenterKeyboardListener;
//# sourceMappingURL=center-fit.js.map