"use strict";
/********************************************************************************
 * Copyright (c) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElementFader = exports.FadeAnimation = void 0;
const inversify_1 = require("inversify");
const animation_1 = require("../../base/animations/animation");
const smodel_1 = require("../../base/model/smodel");
const vnode_utils_1 = require("../../base/views/vnode-utils");
const model_1 = require("./model");
class FadeAnimation extends animation_1.Animation {
    constructor(model, elementFades, context, removeAfterFadeOut = false) {
        super(context);
        this.model = model;
        this.elementFades = elementFades;
        this.removeAfterFadeOut = removeAfterFadeOut;
    }
    tween(t, context) {
        for (const elementFade of this.elementFades) {
            const element = elementFade.element;
            if (elementFade.type === 'in') {
                element.opacity = t;
            }
            else if (elementFade.type === 'out') {
                element.opacity = 1 - t;
                if (t === 1 && this.removeAfterFadeOut && element instanceof smodel_1.SChildElementImpl) {
                    element.parent.remove(element);
                }
            }
        }
        return this.model;
    }
}
exports.FadeAnimation = FadeAnimation;
let ElementFader = class ElementFader {
    decorate(vnode, element) {
        if ((0, model_1.isFadeable)(element) && element.opacity !== 1) {
            (0, vnode_utils_1.setAttr)(vnode, 'opacity', element.opacity);
        }
        return vnode;
    }
    postUpdate() {
    }
};
exports.ElementFader = ElementFader;
exports.ElementFader = ElementFader = __decorate([
    (0, inversify_1.injectable)()
], ElementFader);
//# sourceMappingURL=fade.js.map